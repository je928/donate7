<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">
	<!-- Use type aliases to avoid typing the full classname every time. -->
	<resultMap id="MemberResult" type="member">
		<result property="m_no" column="m_no"/>
		<result property="m_email" column="m_email"/>
		<result property="m_passwd" column="m_passwd"/>
		<result property="m_name" column="m_name"/>
		<result property="m_nick" column="m_nick"/>
		<result property="m_birth" column="m_birth"/>
		<result property="m_gender" column="m_gender"/>
		<result property="m_tel" column="m_tel"/>
		<result property="m_job" column="m_job"/>
		<result property="m_warning" column="m_warning"/>
		<result property="m_reg_date" column="m_reg_date"/>
		<result property="m_out_date" column="m_out_date"/>
		<result property="m_del_yn" column="m_del_yn"/>
		<result property="no" column="no"/>
		<result property="passwd" column="passwd"/>		
	</resultMap>
	
	<select id="selectNum" resultType="Integer">
		select nvl(max(m_no),0)+1 from member
	</select>
	
	<insert id="insertMember" parameterType="member">
		insert into member values(#{m_no},#{m_email},#{m_passwd},#{m_name},#{m_nick},#{m_birth},#{m_gender},#{m_tel},#{m_job},0,sysdate,null,'n')
	</insert>
	
	<select id="selectMno" parameterType="String" resultType="Integer">
		select nvl(max(m_no),0) as m_no from member where m_email=#{m_email} and m_del_yn='y'
	</select>
	
	<update id="insertReMember" parameterType="member">
		update member set m_passwd=#{m_passwd},m_name=#{m_name},m_nick=#{m_nick},m_birth=#{m_birth},m_gender=#{m_gender},m_tel=#{m_tel},m_job=#{m_job},m_reg_date=sysdate,m_del_yn='n' where m_no=#{m_no}
	</update>
	
	<select id="loginChk" parameterType="String" resultType="String">
		select passwd from (select m_no as no, m_email as email, m_passwd as passwd, m_del_yn as del_yn from member union select o_no, o_email, o_passwd, o_del_yn from organ) a where a.email=#{email} and a.del_yn='n'
	</select>
	
	<select id="selectMno2" parameterType="String" resultType="String">
		select nvl(no,0) as no from (select m_no as no, m_email as email, m_passwd as passwd, m_del_yn as del_yn from member union select o_no, o_email, o_passwd, o_del_yn from organ) a where a.email=#{email} and a.del_yn='n'
	</select>
	
	<select id="m_emailChk" parameterType="String" resultType="Integer">
		select count(*) from (select m_email as email from member where m_del_yn='n' union select o_email from organ where o_del_yn='n') a where a.email=#{m_email}
	</select>
	
	<select id="selectMember" parameterType="Integer" resultMap="MemberResult">
		select * from member where m_no=#{m_no} and m_del_yn='n'
	</select>
	
	<update id="updateMember" parameterType="member">
		update member set m_passwd=#{m_passwd}, m_nick=#{m_nick}, m_birth=#{m_birth}, m_tel=#{m_tel}, m_job=#{m_job}, m_del_yn='n' where m_no=#{m_no}
	</update>
	
	<update id="deleteMember" parameterType="Integer">
		update member set m_del_yn='y', m_out_date=sysdate where m_no=#{m_no} and m_del_yn='n'
	</update>
	
	<select id="nickChk" parameterType="member" resultType="String">
		select m_nick from member where m_nick=#{m_nick} and m_del_yn='n' and m_no != #{m_no} union select m_nick from member where m_no=#{m_no} and m_nick=#{m_nick}
	</select>

	<select id="nickChk2" parameterType="Integer" resultType="String">
		select m_nick from member where m_no=#{m_no}
	</select>
	
	<select id="passwdChk" parameterType="hashMap" resultType="String">
		select m_passwd from member m_no=#{m_no} and m_passwd=#{m_passwd}
	</select>

</mapper>